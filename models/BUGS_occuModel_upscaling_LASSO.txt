
  model{

  # State model
  for (i in 1:nsite){ 
    for (t in 1:nyear){
    
      z[i,t] ~ dbern(muZ[i,t]) 
      
      logit(muZ[i,t]) <- int.alpha + inprod(beta[],occDM[i,]) + 
                          random.adm[adm[i]] + 
                          random.year[t] 
      
    }
  }   
  
  ### Observation Model
  for(j in 1:nvisit) {
    y[j] ~ dbern(Py[j]) #data is Y
    Py[j]<- z[site[j],year[j]]*p[j] 

    #detection model:
      logit(p[j]) <-  int.d + 
                      beta.det.open * det.open[j] +
                      beta.effort * Effort[j] +
                      random.det.year[year[j]] +
                      random.det.adm[det.adm[j]]
                      
    } 
  
  #get mean z without year effect
  for (i in 1:nsite){ 
      grid.z[i] <- sum(z[i,])/nyear
      grid.psi[i] <- sum(muZ[i,])/nyear
  } 
  
  #get mid years psi and z
  for(i in 1:nsite){
    mid.z[i] <- z[i,6]
    mid.psi[i] <- muZ[i,6]
  }
  

  #Priors 

  # State model priors
    ############################
    
    #intercept
    mean.psi ~ dunif(0, 1)       
    int.alpha <- logit(mean.psi)
 
    for(i in 1:n.covs){
      beta[i] ~ ddexp(0, dd.tau)
    }
    dd.tau ~ dgamma(0.01, 0.01)
    
    #years
    for(t in 1:nyear){
      random.year[t] ~ dnorm(0, tau.a)
    }
    tau.a <- 1/(sd.a * sd.a)
    sd.a ~ dt(0, pow(2.5,-2), 1)T(0,) 
    
    #site effects
    #for (i in 1:nsite) {
    #  eta[i] ~ dnorm(0, tau2)       
    #} 
    #tau2 <- 1/(sigma2 * sigma2) 
    #sigma2 ~ dt(0, pow(2.5,-2), 1)T(0,)

    #adm effects
    for(i in 1:n.adm){
      random.adm[i] ~ dnorm(0,random.adm.tau)
    }
    random.adm.tau <- pow(random.adm.sd,-2)
    random.adm.sd ~ dt(0, pow(2.5,-2), 1)T(0,)

    #Observation model priors
    ##########################
    mean.p ~ dunif(0, 1)        
    int.d <- logit(mean.p)
    
    #year effects
    for (t in 1:nyear) {
      random.det.year[t] ~ dnorm(0, tau.lp)            
    }
    tau.lp <- 1 / (sd.lp * sd.lp)                 
    sd.lp ~ dt(0, pow(2.5,-2), 1)T(0,)  
    
    #covariate effects
    beta.det.open ~ dnorm(0,0.01)
    beta.effort ~ dnorm(0,0.01)
    
    #adm effects
    for(i in 1:n.adm){
      random.det.adm[i] ~ dnorm(0,random.det.adm.tau)
    }
    random.det.adm.tau <- pow(random.adm.sd,-2)
    random.det.adm.sd ~ dt(0, pow(2.5,-2), 1)T(0,)


  }
    
