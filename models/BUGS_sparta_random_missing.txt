
  model{
  # JAGS code for SPARTA model 
  # on the year effect of the state model + intercept 
  
  # State model
  for (i in 1:nsite){ 
    for (t in 1:nyear){
      
      z[i,t] ~ dbern(muZ[i,t]) 
      
      logit(muZ[i,t]) <- int.alpha + random.adm[adm[i]] 
      
      # year as a fixed factor and site as a random factor and environ variables
    }
  }   
  
  ### Observation Model
  for(j in 1:nvisit) {

    y[j] ~ dbern(Py[j]) #data is Y
    
    Py[j]<- z[site[j],year[j]]*p[j] #probability to detect = prob of occ * prob of detection

    #detection model:
    logit(p[j]) <-  int.d + alpha.p[year[j]]

    # dtype.p *L2[j]/L[j]  + d.tree * tree_line_position[site[j]] + d.tree2 * tree_line_position2[site[j]]
  } 

  #model for missing list length data
  for(j in 1:nvisit){
    L[j] ~ dpois(muL[j])
    L2[j] ~ dpois(muL2[j])
    muL[j] <- intL 
    muL2[j] <- intL2 
  }
  intL ~ dunif(0,100)  
  intL2 ~ dunif(0,100)

  # Derived parameters
  for (t in 1:nyear) {  
    psi.fs[t] <- sum(z[1:nsite, t])/nsite
  } 

  #Priors 

  # State model priors
  #####################
    mean.psi ~ dunif(0, 1)       # Occupancy intercept on prob. scale
    int.alpha <- logit(mean.psi)

    #random year effects
    for(t in 1:nyear){
      a[t] ~ dnorm(0, tau.y)
    }
    tau.y <- 1/(sd.y * sd.y)
    sd.y ~ dunif(0,10) 
    
    #site effects
    for (i in 1:nsite) {
      eta[i] ~ dnorm(0, tau.s)       
    } 
    tau.s <- 1/(sd.s * sd.s) 
    sd.s ~ dunif(0,10)

    #adm effects
    for(i in 1:n.adm){
      random.adm[i] ~ dnorm(0,random.adm.tau)
    }
    random.adm.tau <- pow(random.adm.sd,-2)
    random.adm.sd ~ dunif(0,10)
    
    #Observation model priors
    #########################

    #year effects
    for (t in 1:nyear) {
      alpha.p[t] ~ dnorm(0, tau.lp)            
    }
    
    tau.lp <- 1 / (sd.lp * sd.lp)                 
    sd.lp ~ dt(0, 1, 1)T(0,) 

    mean.p ~ dunif(0, 1)         # Detection intercept on prob. scale
    int.d <- logit(mean.p)

    dtype.p ~ dnorm(0, 0.01)
    d.tree ~ dnorm(0, 0.01)
    d.tree2 ~ dnorm(0, 0.01)

  }
    
